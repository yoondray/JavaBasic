public class Type {
    public static void main(String[] args) {
        //작은 범위에서 큰 범위 대입은 허용한다.
        //int < long <double

        //같은 타입에 값을 대입할 수 있다.

        int intValue = 10;
        long longValue;
        double doubleValue;

        //자동 형변환, 묵시적 형변환
        doubleValue = intValue;
        doubleValue = (double) intValue;
        doubleValue = (double) 10;
        doubleValue = 10.0;

        System.out.println("doubleValue = " + doubleValue);

        longValue = intValue;
        System.out.println("longValue = " + longValue);

        doubleValue = 2000000L;
        System.out.println("doubleValue2 = " + doubleValue);



        //iValue = dValue;
        //명시적 형변환
        iValue = (int) dValue;
        System.out.println("iValue = " + iValue); //1

        long maxIntValue = 2147483647;  //int 최대값
        // long maxIntOver = 2147483648; 오류발생(int 최대값 + 1)
//        long maxIntOver = 2147483648L;

        //이 숫자는 리터럴 int를 넘기때문에 L을 붙여줘야한다.
        long maxIntOver = 2147483649L;
        long minIntValue = 100;

        //형변환
        iValue = (int) maxIntValue;
        System.out.println("maxIntValue casting = " + iValue);

        iValue = (int) minIntValue;
        System.out.println("minIntValue casting = " + iValue);

        iValue = (int) maxIntOver;
        System.out.println("maxIntOver casting = " + iValue);
        //int의 가장 작은 범위부터 다시 시작함 : int의 overflow임(기존 범위를 초과해서 나타낸다.)
        //maxIntOver casting = -2147483647

        //오버플로우가 발생하는 것 자체가 문제이다. - 오버플로우가 발생하지 않도록 해야한다.
        //발생했다면 int > long으로 바꾼다.


        int div1 = 3/2;             // 1
        double div2 = 3/2;          //1.0
        double div3 = 3.0/2;        //1.5
        double div4 = (double) 3/2; //1.5

        int a = 3;
        int b = 2;

        double result = (double) a/b;
        System.out.println("result = " + result);

        //1.같은 타입끼리 연산은 같은 타입의 결과를 낸다.
        //int + int = int / double + double = double

        //2.서로 다른 타입의 계산은 큰 범위로 자동 형변환이 일어난다.
        //int + long = long + long / int + double = double + double

    }
}
